The Loop Logic Structure.

A third logic structure for designing decisions is the loop structure. The loop logic structure is the repeating structure. Most problems in business involve doing the same task over and over for different sets of data, so this structure is extremely important. Through the loop structure, a program can process many payroll records or inventory items, or put a mailing list in alphabetical or zip code order. This structure is harder to understand than the decision structure, but easier to use. The main difficulty in using it as part of a solution is identifying what instructions should be repeated. Besides being used to repeat instructions in a solution, the loop structure is also used to return the processing to an earlier point in the solution. When it is used in this way, it is a replacement for the GoTo statement. (The GoTo is an instruction that tells the computer to transfer to another instruction in the solution instead of processing the next instruction in sequence.) Replacing the GoTo statement in this way increases the readability of the program.

There are three types of loop structures, and each of them can be written in another way as a set of instructions using the If/Then/Else structure and the GoTo instruction. However, the If/Then/Else is a decision logic structure and generally should not be used to facilitate a loop. The loop structure is easier to read and to maintain than the If/Then/Else and GoTo combination. Since you already understand the decision logic structure, the decision equivalence to each loop structure will be illustrated to aid your understanding of loops.

The first type of loop structure is the While/WhileEnd loop, which repeats instructions while a condition is True and stops repeating when a condition arises that is not True. The second type is the Repeat/Until loop, which repeats instructions while a condition is False or until a condition is True. The third is the automatic-counter loop in which a variable is set equal to a given number and increases in equal given increments until it is greater than an ending number. Each of the three loop structures has a specific use according to the language and/or the problem.
The algorithm and the flowchart differ with each type of loop structure. It is extremely important to indent the instructions in algorithms using the loop structure as it is with the decision structure to improve readability. Also, nested loops are common, and in these solutions indentation with bracketing allows you to easily identify each loop.
Several standard types of tasks are accomplished through the use of the loop structure. Two of these are counting (also called incrementing and decrementing) and accumulating (also called calculating a sum or a total). In both tasks a number is added or subtracted from a variable and the result is stored back into the same variable. The basic difference between counting and accumulating is in the value that is added or subtracted. When counting, the value is a constant; when accumulating, the value is a variable. In each case the resultant variable is assigned the value of zero before starting the loop. This is called initializing the variable.